// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Yako.Infrastructure;

#nullable disable

namespace Yako.Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Yako.Infrastructure.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Yako.Infrastructure.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Yako.Infrastructure.Entities.Business", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("AverageRating")
                        .HasColumnType("float");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MapUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Businesses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10cd96f7-055e-477c-a7c3-55672d94dd72"),
                            Address = "ABC Adres 23/AB Beylikdüzü / İstanbul",
                            CategoryId = new Guid("4d344306-b4d4-48ec-87b6-10ea88278738"),
                            Description = "Eşsiz tatlar sunan bu restoran, taze malzemeleri ve samimi atmosferiyle öne çıkıyor. Aile yemekleri ve özel günler için ideal.",
                            ImageUrl = "~/img/restaurant-interior.jpg",
                            Location = "Ab",
                            MapUrl = "https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d96374.75531637031!2d28.490740386946495!3d40.98780644834785!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x14b55fc19deb0b3b%3A0xdf4ea093f30983c6!2zQmV5bGlrZMO8esO8L8Swc3RhbmJ1bA!5e0!3m2!1str!2str!4v1747503585138!5m2!1str!2str",
                            Title = "Lezzet Durağı"
                        },
                        new
                        {
                            Id = new Guid("c9689159-39cf-4579-8810-0308844a2c34"),
                            Address = "Cumhuriyet Mah. 15. Sokak No:12 Üsküdar / İstanbul",
                            CategoryId = new Guid("4d344306-b4d4-48ec-87b6-10ea88278738"),
                            Description = "Geleneksel Türk kahvesi ve nostaljik atmosferiyle ziyaretçilerine huzurlu bir deneyim sunuyor.",
                            ImageUrl = "~/img/indir1.jpg",
                            Location = "Üsküdar",
                            MapUrl = "https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d48152.71064922306!2d28.9698491500249!3d41.03522219759064!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x14cac826d524c9f1%3A0xc14f7612337b7f38!2zw5xza8O8ZGFyL8Swc3RhbmJ1bA!5e0!3m2!1str!2str!4v1747503358041!5m2!1str!2str",
                            Title = "Tarihi Kahve Evi"
                        },
                        new
                        {
                            Id = new Guid("d11302ee-ec5a-4072-878d-bd3740b40ff8"),
                            Address = "Doğa Yolu Cad. No:1 Sapanca / Sakarya",
                            CategoryId = new Guid("ae8bb382-a83c-4fcf-adb5-925d431d62be"),
                            Description = "Yeşillikler içinde yürüyüş yolları, gölet ve piknik alanları ile şehirden uzaklaşmak isteyenler için birebir.",
                            ImageUrl = "~/img/indir2.jpg",
                            Location = "Sapanca",
                            MapUrl = "https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d48403.895557168966!2d30.20122487339016!3d40.690635177290815!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x14ccaf3818a3c281%3A0xa16aa914be62c628!2sSapanca%2C%20Sakarya!5e0!3m2!1str!2str!4v1747503650083!5m2!1str!2str",
                            Title = "Doğa Parkı"
                        },
                        new
                        {
                            Id = new Guid("18afe7ba-9d39-4032-be35-3ba0ac9ce219"),
                            Address = "İstiklal Cad. No:145 Beyoğlu / İstanbul",
                            CategoryId = new Guid("d7d3ff55-84e1-424e-bbc3-67278391b990"),
                            Description = "Modern ve çağdaş sanat eserlerine ev sahipliği yapan bu galeri, sanatseverlerin uğrak noktası.",
                            ImageUrl = "~/img/indir.jpg",
                            Location = "Beyoğlu",
                            MapUrl = "https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d24073.493575970937!2d28.94677986181159!3d41.043046166088175!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x14cab75ad870363d%3A0x25bc05b50533efb0!2zQmV5b8SfbHUvxLBzdGFuYnVs!5e0!3m2!1str!2str!4v1747503715772!5m2!1str!2str",
                            Title = "Sanat Galerisi Modern"
                        },
                        new
                        {
                            Id = new Guid("9ac5de20-1277-4e04-8fa8-40e24efc0814"),
                            Address = "Vadi Mevkii No:7 Fethiye / Muğla",
                            CategoryId = new Guid("c4931636-bf62-43f8-af91-a6d6b70835ec"),
                            Description = "Doğa severler için kamp, yürüyüş ve bisiklet yolları ile ideal bir kaçış noktası.",
                            ImageUrl = "~/img/indir3.jpg",
                            Location = "Fethiye",
                            MapUrl = "https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d51215.09398848661!2d29.08067032055296!3d36.651812855882454!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x14c0439b0db6b13b%3A0x87150704244f70d7!2zRmV0aGl5ZSwgTXXEn2xh!5e0!3m2!1str!2str!4v1747503802157!5m2!1str!2str",
                            Title = "Kampçılar Vadisi"
                        },
                        new
                        {
                            Id = new Guid("bec8b326-6d4e-42a9-8cda-5701c2cad2d0"),
                            Address = "Bahçelievler Mah. 7. Cad. No:45 Çankaya / Ankara",
                            CategoryId = new Guid("3bf423b0-832c-42ae-a95e-c53f24baa3d5"),
                            Description = "Organik ürünlerle hazırlanan yemekleri ve bahçe atmosferiyle dikkat çeken bir aile restoranı.",
                            ImageUrl = "~/img/indir4.jpg",
                            Location = "Çankaya",
                            MapUrl = "https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d196186.0921243584!2d32.71829758380999!3d39.79784598125841!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x14d345ad9f357261%3A0x4b01c691eefd6f1d!2zw4dhbmtheWEvQW5rYXJh!5e0!3m2!1str!2str!4v1747503859235!5m2!1str!2str",
                            Title = "Lezzet Bahçesi"
                        },
                        new
                        {
                            Id = new Guid("6d25a19f-0291-4387-ab3a-e197d95566e8"),
                            Address = "Kültür Cad. No:89 Konak / İzmir",
                            CategoryId = new Guid("debdc0b1-f046-4cbe-87b9-1243af65f672"),
                            Description = "Geniş kitap arşivi, sessiz çalışma alanları ve ücretsiz internet hizmetiyle öğrenci dostu bir ortam sunar.",
                            ImageUrl = "~/img/indir5.jpg",
                            Location = "Konak",
                            MapUrl = "https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d50013.5428788959!2d27.08795479314152!3d38.4219137380358!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x14bbd8e2fece48eb%3A0xafa58b890c33632a!2zS29uYWsvxLB6bWly!5e0!3m2!1str!2str!4v1747503918461!5m2!1str!2str",
                            Title = "Kültür Kütüphanesi"
                        });
                });

            modelBuilder.Entity("Yako.Infrastructure.Entities.BusinessRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("BusinessId", "UserId")
                        .IsUnique();

                    b.ToTable("BusinessRatings");
                });

            modelBuilder.Entity("Yako.Infrastructure.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4d344306-b4d4-48ec-87b6-10ea88278738"),
                            Name = "Restoran"
                        },
                        new
                        {
                            Id = new Guid("ae8bb382-a83c-4fcf-adb5-925d431d62be"),
                            Name = "Park"
                        },
                        new
                        {
                            Id = new Guid("d7d3ff55-84e1-424e-bbc3-67278391b990"),
                            Name = "Müze"
                        },
                        new
                        {
                            Id = new Guid("c4931636-bf62-43f8-af91-a6d6b70835ec"),
                            Name = "Doğa"
                        },
                        new
                        {
                            Id = new Guid("3bf423b0-832c-42ae-a95e-c53f24baa3d5"),
                            Name = "Cafe"
                        },
                        new
                        {
                            Id = new Guid("debdc0b1-f046-4cbe-87b9-1243af65f672"),
                            Name = "Kütüphane"
                        });
                });

            modelBuilder.Entity("Yako.Infrastructure.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Yako.Infrastructure.Entities.MessageToo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MessageToos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Yako.Infrastructure.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Yako.Infrastructure.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Yako.Infrastructure.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Yako.Infrastructure.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Yako.Infrastructure.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Yako.Infrastructure.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Yako.Infrastructure.Entities.Business", b =>
                {
                    b.HasOne("Yako.Infrastructure.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Yako.Infrastructure.Entities.BusinessRating", b =>
                {
                    b.HasOne("Yako.Infrastructure.Entities.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Yako.Infrastructure.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
